package handlers

import (
	"{{ dir .Package }}/db"
	"{{ dir .Package }}/ent"
	"{{ dir .Package }}/ent/{{ lower .CurrentSchema.Name }}"
	"{{ dir .Package }}/utils"
    "encoding/json"

	"github.com/gofiber/fiber/v2"
)

{{ if .WithSwagger }}
// Query{{ plural .CurrentSchema.Name }} godoc
//
//	@Summary	Query {{ plural .CurrentSchema.Name }}
//	@Tags		{{ snake .CurrenctSchema.Name | plural }}
//	@Produce	json
//	@Param		query	query		ent.{{ .CurrentSchema.Name }}QueryInput	false	"Search"
//	@Success	200		{object}	models.Query{{ pascal .CurrentSchema.Name | plural }}Result
//	@Failure	400		{object}	models.Error
//	@Router		/{{ snake .CurrentSchema.Name | plural }}/ [get]
{{ end -}}
func Query{{ plural .CurrentSchema.Name }}(c *fiber.Ctx) error {
	query := new(ent.{{ .CurrentSchema.Name }}QueryInput)
    q := ctx.Query("query")
	
    if q != "" {
		err := json.Unmarshal([]byte(q), query)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
                "kind":"parse_query",
                "error":err.Error(),
            })
		}
	}

    query := db.Client.{{ .CurrentSchema.Name }}.Query().SetInput(query)

    {{ plural .CurrentSchema.Name | camel }}, err := query.All(c.UserContext())
    if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "query_data",
			"error": err.Error(),
		})
	}
    total, _ := query.Count(c.UserContext())

	return c.JSON(fiber.Map{
		"total":        total,
		"{{ plural .CurrentSchema.Name | snake }}": {{ plural .CurrentSchema.Name | camel }},
	})
}

{{ if .WithSwagger }}
// Create{{ .CurrentSchema.Name }} godoc
//
//	@Summary	Create {{ .CurrentSchema.Name }}
//	@Tags		{{ plural .CurrentSchema.Name | snake }}
//	@Accept		json
//	@Accept		mpfd
//	@Produce	json
//	@Param		input	body		ent.{{ .CurrentSchema.Name }}CreateInput	true	"Create {{ .CurrentSchema.Name }}"
//	@Success	200		{object}	ent.{{ .CurrentSchema.Name }}
//	@Failure	400		{object}	models.Error
//	@Router		/{{ plural .CurrentSchema.Name | snake }}/ [post]
{{ end -}}
func Create{{ .CurrentSchema.Name }}(c *fiber.Ctx) error {
	input := new(ent.{{ .CurrentSchema.Name }}CreateInput)
	err := c.BodyParser(input)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "parse_body",
			"error": err.Error(),
		})
	}

	{{ camel .CurrentSchema.Name  }}, err := db.Client.{{ .CurrentSchema.Name }}.Create().SetInput(input).Save(c.UserContext())
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "create_entity",
			"error": err.Error(),
		})
	}

	return c.JSON({{ camel .CurrentSchema.Name }})
}

{{ if .WithSwagger }}
// Update{{ .CurrentSchema.Name }} godoc
//
//	@Summary	Update {{ .CurrentSchema.Name }}
//	@Tags		{{ plural .CurrentSchema.Name | snake }}
//	@Accept		json
//	@Produce	json
//	@Param		id		path		string						true	"{{ .CurrentSchema.Name }} ID"
//	@Param		input	body		ent.{{ .CurrentSchema.Name }}UpdateInput	true	"Update {{ .CurrentSchema.Name }} Body"
//	@Success	200		{object}	ent.{{ .CurrentSchema.Name }}
//	@Failure	400		{object}	models.ErrorBadRequest
//	@Router		/{{ plural .CurrentSchema.Name | snake }}/:id [patch]
{{ end -}}
func Update{{ .CurrentSchema.Name }}(c *fiber.Ctx) error {
	input := new(ent.{{ .CurrentSchema.Name }}UpdateInput)
	id := c.Params("id")

	err := c.BodyParser(input)
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "parse_body",
			"error": err.Error(),
		})
	}

	{{ camel .CurrentSchema.Name }}, err := db.Client.{{ .CurrentSchema.Name }}.UpdateOneID(id).SetInput(input).Save(c.UserContext())
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "update_entity",
			"error": err.Error(),
		})
	}

	return c.JSON({{ camel .CurrentSchema.Name }})
}

{{ if .WithSwagger }}
// Delete{{ .CurrentSchema.Name }} godoc
//
//	@Summary	Delete {{ .CurrentSchema.Name }}
//	@Tags		{{ plural .CurrentSchema.Name | snake }}
//	@Produce	json
//	@Param		id	path		string	true	"{{ .CurrentSchema.Name }} ID"
//	@Success	200	{object}	nil
//	@Failure	400	{object}	models.Error
//	@Failure	404	{object}	models.Error
//	@Router		/{{ plural .CurrentSchema.Name | snake }}/:id [delete]
{{ end -}}
func Delete{{ .CurrentSchema.Name }}(c *fiber.Ctx) error {
	id := c.Params("id")
	err := db.Client.{{ .CurrentSchema.Name }}.DeleteOneID(id).Exec(c.UserContext())
	if err != nil {
        // TODO: ent check the error

		return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
            "kind":" delete_entity",
            "error": err.Error(),
        })
	}

	return c.Status(fiber.StatusOK).JSON(nil)
}
package db

import (
	"{{ dir .Package }}/ent"
	"{{ dir .Package }}/ent/migrate"
	"context"
	"database/sql"
	"log"
	"os"

	"entgo.io/ent/dialect"
	entsql "entgo.io/ent/dialect/sql"
	_ "github.com/go-sql-driver/mysql"
	_ "github.com/jackc/pgx/v5/stdlib"
	_ "github.com/mattn/go-sqlite3"
)

var Client *ent.Client

func Init() {
	Client = SQLite()

	if err := Client.Schema.Create(context.Background(), migrate.WithDropColumn(true), migrate.WithDropIndex(true)); err != nil {
		log.Fatalf("failed creating schema resources: %v", err)
	}
}

func SQLite() *ent.Client {
	client, err := ent.Open("sqlite3", os.Getenv("SQLITE_DSN"))
	if err != nil {
		log.Fatalf("failed opening connection to sqlite: %v", err)
	}
	return client
}

func PgSQL() *ent.Client {
	db, err := sql.Open("pgx", os.Getenv("POSTGRESQL_DSN"))
	if err != nil {
		log.Fatal(err)
	}

	// Create an ent.Driver from `db`.
	drv := entsql.OpenDB(dialect.Postgres, db)
	return ent.NewClient(ent.Driver(drv))
}

func MySQL() *ent.Client {
	client, err := ent.Open("mysql", os.Getenv("MYSQL_DSN"))
	if err != nil {
		log.Fatal(err)
	}

	return client
}

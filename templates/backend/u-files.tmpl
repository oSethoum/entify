package handlers

import (
	"{{ dir .Package }}/models"
	"{{ dir .Package }}/utils"
	"fmt"
	"os"
	"path/filepath"

	"github.com/gofiber/fiber/v2"
)

{{ if .Config.Swagger }}
// Upload Files godoc
//
//	@Summary	Upload Files
//	@Tags		files
//	@Accepts	mpfd
//	@Produce	json
//	@Param		input body		string	true	"Upload Files"
//	@Success	200	 {object}	models.Files
//	@Failure	400	 {object}	models.Error
//	@Router		/files [post]
{{ end -}}
func UploadFiles(c *fiber.Ctx) error {
	form, err := c.MultipartForm()

	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "multipart_form",
			"error": err.Error(),
		})
	}

	files := form.File["documents"]
	names := []string{}
	for _, file := range files {
		name := utils.ID() + filepath.Ext(file.Filename)
		err := c.SaveFile(file, fmt.Sprintf("./upload/%s", name))
		if err == nil {
			names = append(names, name)
		}
	}

	return c.JSON(fiber.Map{
		"files": names,
	})
}

{{ if .Config.Swagger }}
// Delete Files godoc
//
//	@Summary	Delete Files
//	@Tags		files
//	@Accept	    json
//	@Produce	json
//	@Param		input body		models.Files	true	"Upload File Body"
//	@Success	200	 {object}	models.Files
//	@Failure	400	 {object}	models.Error
//	@Router		/files [delete]
{{ end -}}
func DeleteFiles(c *fiber.Ctx) error {

	body := new(models.Files)

	err := c.BodyParser(body)

	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
			"kind":  "parse_body",
			"error": err.Error(),
		})
	}
	names := []string{}
	for _, name := range body.Files {
		err = os.Remove(fmt.Sprintf("./upload/%s", name))
		if err == nil {
			names = append(names, name)
		}
	}

	return c.JSON(fiber.Map{
		"files": names,
	})
}

